{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","constructor","Error","getConnection","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":"AAAA,IAAIA,oBAAqB,YAAU;AAC/B,UAAMC,SAAS,CAAC,UAAD,CAAf;AACA,UAAMC,UAAU,CAAhB;AACA,UAAMC,SAAS,YAAf;AACA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAED,WAAO,MAAML,iBAAN,CAAuB;AACzBM,sBAAa;;AAET,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAED,eAAOC,aAAP,GAAsB;;AAElB,mBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAU,4BAAYI,eAAZ,GAA8BC,KAAK;AAC/BjB,sCAAkBkB,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,iBAFD;;AAIAR,4BAAYS,SAAZ,GAAwBJ,KAAK;AACzB,wBAAG,CAACb,UAAJ,EAAe;AACXA,qCAAaa,EAAEE,MAAF,CAASC,MAAtB;AACAf,gCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,mCAAWC,KAAX,GAAmB,YAAU;AACzB,kCAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,yBAFD;AAGH;AACDG,4BAAQN,UAAR;AACH,iBATD;;AAWAQ,4BAAYW,OAAZ,GAAsBN,KAAK;AACvBO,4BAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAf,2BAAOM,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iBAHD;AAKH,aAxBM,CAAP;AA0BH;;AAED,eAAOT,aAAP,CAAqBd,UAArB,EAAgC;;AAE5BoB,oBAAQC,GAAR,CAAYrB,UAAZ;AACAH,mBAAO2B,OAAP,CAAeC,SAAS;AACpB,oBAAGzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EAA+C;AAC3CzB,+BAAW4B,iBAAX,CAA6BH,KAA7B;AACH;AACDzB,2BAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,aALD;AAMH;;AAED,eAAOC,eAAP,GAAwB;AACpB,gBAAG/B,UAAH,EAAc;AACVC;AACAD,6BAAa,IAAb;AACH;AACJ;AApDwB,KAA9B;AAuDF,CA9DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function(){\r\n    const stores = ['business'];\r\n    const version = 4;\r\n    const dbName = 'businessDB';\r\n    var connection = null;\r\n    var close = null;\r\n\r\n   return class ConnectionFactory{\r\n        constructor(){\r\n\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n        }\r\n\r\n        static getConnection(){\r\n\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                }\r\n\r\n                openRequest.onsuccess = e => {\r\n                    if(!connection){\r\n                        connection = e.target.result\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error('Você não pode fechar diretamente a conexão');\r\n                        }\r\n                    };\r\n                    resolve(connection);\r\n                }\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n        \r\n        static _createStores(connection){\r\n\r\n            console.log(connection)\r\n            stores.forEach(store => {\r\n                if(connection.objectStoreNames.contains(store)){\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n            if(connection){\r\n                close();\r\n                connection = null; \r\n            }\r\n        }\r\n    }\r\n\r\n})();"]}