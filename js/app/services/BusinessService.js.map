{"version":3,"sources":["../../app-es6/services/BusinessService.js"],"names":["HttpService","ConnectionFactory","BusinessDao","Business","BusinessService","http","Promise","all","importBusiness","businessImportLastWeek","businessImportWeekBeforeLast","then","business","periods","reduce","data","period","concat","catch","Error","err","get","response","map","Date","quantidade","valor","console","log","_businessList","delete","_message","text","getConnection","connection","dao","add","listAll","clearAll","currentList","getAllBusiness","businessList","filter","some","isEquals","existentBusiness"],"mappings":"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","file":"BusinessService.js","sourcesContent":["import {HttpService} from \"./HttpService.js\";\r\nimport {ConnectionFactory} from \"./ConnectionFactory.js\";\r\nimport {BusinessDao} from \"../dao/BusinessDao.js\";\r\nimport {Business} from \"../models/Business.js\";\r\n\r\n\r\nexport class BusinessService{\r\n\r\n    constructor(){\r\n        this.http = new HttpService();\r\n    }\r\n\r\n    getAllBusiness(){\r\n        return Promise.all([\r\n            this.importBusiness(),\r\n            this.businessImportLastWeek(),\r\n            this.businessImportWeekBeforeLast()\r\n        ]).then(periods => {\r\n            let business = periods\r\n                .reduce((data, period) => data.concat(period), []);\r\n            return business\r\n        }).catch(err =>{\r\n            throw new Error(err);\r\n        });\r\n    }\r\n\r\n    importBusiness(){ \r\n        return this.http\r\n            .get('negociacoes/semana')\r\n            .then(response => {\r\n                return response.map(business =>\r\n                    new Business(new Date(business.data), business.quantidade, business.valor));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Não foi possível obter as negociações da semana..');\r\n            })\r\n    }\r\n\r\n    businessImportLastWeek(){\r\n        return this.http\r\n            .get('negociacoes/anterior')\r\n            .then(response => {\r\n                return response.map(business =>\r\n                    new Business(new Date(business.data), business.quantidade, business.valor));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Não foi possível obter as negociações da semana anterior..');\r\n            })\r\n    }   \r\n\r\n    businessImportWeekBeforeLast(){\r\n        return this.http\r\n            .get('negociacoes/retrasada')\r\n            .then(response => {\r\n                return response.map(business =>\r\n                    new Business(new Date(business.data), business.quantidade, business.valor));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Não foi possível obter as negociações da semana retrasada..');\r\n            })\r\n    }   \r\n\r\n    exclude(){\r\n        this._businessList.delete();\r\n        this._message.text = \"Lista de negociação apagada com sucesso!\";\r\n    }\r\n\r\n    register(business){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new BusinessDao(connection))\r\n            .then(dao => dao.add(business))\r\n            .then(() => 'Negociaçao cadastrada com sucesso')\r\n            .catch(err =>{\r\n                console.log(err)\r\n                throw new Error('Nao foi possível adicionar a negociaçao')\r\n            });\r\n    }\r\n\r\n    list(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new BusinessDao(connection))\r\n            .then(dao => dao.listAll())\r\n            .catch(err => {\r\n                console.log(err)\r\n                throw new Error('Nao foi possível obter as negociaçoes')\r\n            })\r\n    }\r\n\r\n    delete(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new BusinessDao(connection))\r\n            .then(dao => dao.clearAll())\r\n            .then(() => 'Negociaçoes apagadas com sucesso')\r\n            .catch(err => {\r\n                console.log(err)\r\n                throw new Error ('Nao foi possível apagar as negociaçoes')\r\n            });\r\n    }\r\n\r\n    import(currentList){\r\n        return this.getAllBusiness()\r\n        .then(businessList => \r\n            businessList.filter(business => \r\n                !currentList.some(existentBusiness => \r\n                    business.isEquals(existentBusiness)\r\n                )\r\n            )\r\n        )\r\n        .catch(err => {\r\n            console.log(err);\r\n            throw new Error('Nao foi possível importar as negociaçoes');\r\n        });\r\n    }\r\n}"]}