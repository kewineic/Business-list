{"version":3,"sources":["../../app-es6/services/BusinessService.js"],"names":["BusinessService","constructor","http","HttpService","getAllBusiness","Promise","all","importBusiness","businessImportLastWeek","businessImportWeekBeforeLast","then","periods","business","reduce","data","period","concat","catch","err","Error","get","response","map","Business","Date","quantidade","valor","console","log","exclude","_businessList","delete","_message","text","register","ConnectionFactory","getConnection","connection","BusinessDao","dao","add","list","listAll","clearAll","import","currentList","businessList","filter","some","existentBusiness","isEquals"],"mappings":"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","file":"BusinessService.js","sourcesContent":["class BusinessService{\r\n\r\n    constructor(){\r\n        this.http = new HttpService();\r\n    }\r\n\r\n    getAllBusiness(){\r\n        return Promise.all([\r\n            this.importBusiness(),\r\n            this.businessImportLastWeek(),\r\n            this.businessImportWeekBeforeLast()\r\n        ]).then(periods => {\r\n            let business = periods\r\n                .reduce((data, period) => data.concat(period), []);\r\n            return business\r\n        }).catch(err =>{\r\n            throw new Error(err);\r\n        });\r\n    }\r\n\r\n    importBusiness(){ \r\n        return this.http\r\n            .get('negociacoes/semana')\r\n            .then(response => {\r\n                return response.map(business =>\r\n                    new Business(new Date(business.data), business.quantidade, business.valor));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Não foi possível obter as negociações da semana..');\r\n            })\r\n    }\r\n\r\n    businessImportLastWeek(){\r\n        return this.http\r\n            .get('negociacoes/anterior')\r\n            .then(response => {\r\n                return response.map(business =>\r\n                    new Business(new Date(business.data), business.quantidade, business.valor));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Não foi possível obter as negociações da semana anterior..');\r\n            })\r\n    }   \r\n\r\n    businessImportWeekBeforeLast(){\r\n        return this.http\r\n            .get('negociacoes/retrasada')\r\n            .then(response => {\r\n                return response.map(business =>\r\n                    new Business(new Date(business.data), business.quantidade, business.valor));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Não foi possível obter as negociações da semana retrasada..');\r\n            })\r\n    }   \r\n\r\n    exclude(){\r\n        this._businessList.delete();\r\n        this._message.text = \"Lista de negociação apagada com sucesso!\";\r\n    }\r\n\r\n    register(business){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new BusinessDao(connection))\r\n            .then(dao => dao.add(business))\r\n            .then(() => 'Negociaçao cadastrada com sucesso')\r\n            .catch(err =>{\r\n                console.log(err)\r\n                throw new Error('Nao foi possível adicionar a negociaçao')\r\n            });\r\n    }\r\n\r\n    list(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new BusinessDao(connection))\r\n            .then(dao => dao.listAll())\r\n            .catch(err => {\r\n                console.log(err)\r\n                throw new Error('Nao foi possível obter as negociaçoes')\r\n            })\r\n    }\r\n\r\n    delete(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new BusinessDao(connection))\r\n            .then(dao => dao.clearAll())\r\n            .then(() => 'Negociaçoes apagadas com sucesso')\r\n            .catch(err => {\r\n                console.log(err)\r\n                throw new Error ('Nao foi possível apagar as negociaçoes')\r\n            });\r\n    }\r\n\r\n    import(currentList){\r\n        return this.getAllBusiness()\r\n        .then(businessList => \r\n            businessList.filter(business => \r\n                !currentList.some(existentBusiness => \r\n                    business.isEquals(existentBusiness)\r\n                )\r\n            )\r\n        )\r\n        .catch(err => {\r\n            console.log(err);\r\n            throw new Error('Nao foi possível importar as negociaçoes');\r\n        });\r\n    }\r\n}"]}